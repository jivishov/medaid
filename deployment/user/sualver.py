import streamlit as st
import base64
import aides
import asyncio
import fcrypto as db_tasks
#from streamlit_option_menu import option_menu
# from menu import menu

st.set_page_config(page_title="medAId.az", page_icon=None, layout="wide")

# menu()

def image_to_base64_string(uploaded_image):
    bytes_data = uploaded_image.getvalue()
    base64_string = base64.b64encode(bytes_data).decode()
    return base64_string

image_string_list=['','','']

@st.fragment
def send_images_to_server(image_list):
    # if "file_name" not in st.session_state:
    #     st.session_state.file_name="none"
    result, file_name=db_tasks.combine_and_send_images(image_list)
    st.session_state.file_name=file_name
    #st.write(file_name)
    return result, file_name

@st.fragment
def upload_lab_images(image_string_list):
    uploaded_files = st.file_uploader("Laboratoriya analiz nəticələrini seçin (maks. 3 foto)", accept_multiple_files=True)
    if len(uploaded_files)>3:
        st.error("Xahiş edirik 3 fotodan çox yükləməyin.")
    else:
        if uploaded_files:
            image_string_list=[]
            cols=st.columns(len(uploaded_files))
            i=-1
            pages=["Birinci səhifə","İkinci səhifə","Üçüncü səhifə"]
            for uploaded_file in uploaded_files:
                i+=1
                image_string_list.append(image_to_base64_string(uploaded_file))
                cols[i].image(uploaded_file,caption=f"{pages[i]}")
    if "image_list" not in st.session_state:
        st.session_state["image_list"]=image_string_list
    else:
        st.session_state["image_list"]=image_string_list 

@st.fragment()
async def run_together(image_list,task,info):
    claude_response=await asyncio.gather(aides.better_call_dr_qaib_claude(image_list, task,info),)
    return claude_response     
            
# @st.cache_data(show_spinner=True, ttl="5 minutes")
@st.fragment()
def analyse_images_return_triage_quests(image_string_list):
    #INTERPRET LAB RESULTS AND GENERATE TRIAGE INFO
    claude_response=asyncio.run(run_together(image_string_list,"evaluate_lab_images",""))
    if claude_response!="":
        claude_results, claude_triage =aides.parse_claude_results_triage_response(str(claude_response))
        return claude_results, claude_triage

# @st.cache_data(show_spinner=True, ttl="5 minutes")
@st.fragment
def prepare_followup_questions(resultsANDtriage):
    followup_questions_list=asyncio.run(run_together([],"make_followup_questions", resultsANDtriage))
    followup_questions=''.join(followup_questions_list)
    return followup_questions

@st.fragment
def continue_after_lab_analysis():
    # st.write("experimental fragment started")
    if not ("claude_triage" in st.session_state):
        st.session_state.claude_triage=""
    if not ("triage_answers" in st.session_state):
        st.session_state.triage_answers=""
    if not ("claude_results" in st.session_state):
        st.session_state.claude_results=""
    if not ("followup_questions" in st.session_state):
        st.session_state.followup_questions=""
    if not ("user_followup_questions" in st.session_state):
        st.session_state.user_followup_questions=""
     
    submit_images_button_clicked=st.button("Məlumat və analiz nəticələrimi qeyd elədim, davam edək",type="primary", disabled=(st.session_state.image_list[0]==""), key="submit_to_qAIb")
    if submit_images_button_clicked: #SUBMIT LAB IMAGES TO THE LLM TO ANALYSE AND GENERATE TRIAGE QUESTIONS
        with st.spinner("Xahiş edirəm gözləyin, fikrimi cəmləyirəm..."):
            st.session_state.claude_results, st.session_state.claude_triage=analyse_images_return_triage_quests(st.session_state["image_list"])
    
    if st.session_state.claude_triage!="": #IF IMAGES WERE ANALYSED AND TRIAGE QUESTIONS ARE GENERATED BY THE LLM
        st.session_state.triage_answers=st.text_area("Xahiş edirik aşağıdakı suallara cavab verəsiniz:", 
                                        value=st.session_state.claude_triage, key='triage_quests_txt', height=200) #,on_change=save_triage_answers
            
        submit_triage_questions_clicked=st.button('Sualları cavabladım, davam edək',type="primary", key="submit_triage_quests",)
        if submit_triage_questions_clicked: #IF TRIAGE QUESTIONS ANSWERED AND SUBMITTED BY THE USER
            with st.spinner("Lütfən bir az gözləyin, fikrimi cəmləyirəm..."):
                st.session_state.followup_questions=prepare_followup_questions(st.session_state.claude_results+" "+st.session_state.triage_answers)
        
    if st.session_state.followup_questions!="": #LLM PREPARED THE FOLLOWUP QUESTIONS. NOW GET THEM IN CASE ALTERED BY THE USER.
        st.session_state.user_followup_questions=st.text_area("Həkiminizə aşağıdakı sualları soruşmağınızı təklif edirik:", 
                                        value=st.session_state.followup_questions, key='user_followup_quests_txt', height=200) #,on_change=save_triage_answers
        if st.button("Qeyd et və həkimləri seçək...", type="primary", key="submit_followup_quests"):
            patient_id = st.number_input("Patient ID", min_value=1)
            lab_results = st.text_area("Lab Results")
            llm_triage = st.text_area("LLM Triage")
            ptnt_triage_answ = st.text_area("Patient Triage Answer")
            llm_followup_quest = st.text_area("LLM Followup Questions")
            ptnt_followup_quest = st.text_area("Patient Followup Questions")
            lab_photo = st.text_input("Lab Photo URL")
            llm_type = st.text_input("LLM Type")
            db_tasks.submit_patient_question(patient_id, lab_results, llm_triage, ptnt_triage_answ, llm_followup_quest, ptnt_followup_quest, lab_photo, llm_type)
            st.success(f"Məlumatlar qeyd edildi. Lütfən növbəti addıma davam edin.\n {st.session_state.user_followup_questions}")

# def main():
#1st TAB FOR A PATIENT TO START
with st.expander('##### Məlumatlarınızı daxil edin və analiz nəticələrinizi yükləyin (maks. 3 səhifə) ######', expanded=True):
    # st.html("<h5>1-ci addım: Məlumatlarınızı daxil edin və analiz nəticələrinizi yükləyin (maks. 3 səhifə)</h5>")
# Medical History & Current Medications
    st.html("<h6 class='gen_header'>Tibbi tarixçə və dərmanlar</h6>")
    with st.container(border=True):
        # Current Symptoms
        col5, col6=st.columns(2)
        with col5:
            patient_symptoms = st.text_input("Hal hazırda hər hansı simptomlar var? Varsa təsvir edin.", max_chars=100)    
        with col6:
            patient_medications = st.text_input("Hal hazırda qəbul etdiyiniz dərman(lar) var? Varsa ad(lar)ını yazın", max_chars=100)
#Upload scanned lab analysis
    st.html("<h6 class='gen_header'>Laboratoriya analiz nəticələri</h6>")
    with st.container(border=True):
        #UPLOAD FILES AND STORE IN THE SESSION STATE
        upload_lab_images(image_string_list)
        #####the code below is in the wrong spot
        if "image_list" in st.session_state:
            if st.session_state.image_list[0]!='': #if there is at leas 1 image file name
                result, file_name=send_images_to_server(st.session_state.image_list)
                if result==200:
                    result_code=db_tasks.submit_patient_question(1, st.session_state.claude_results, st.session_state.claude_triage, st.session_state.triage_answers, 
                                st.session_state.followup_questions, st.session_state.user_followup_questions, file_name, "sonnet35")
                    if isinstance(result_code, int):
                        # Call was successful, proceed further
                        st.session_state.question_id = result_code
                        # ... do something with question_id
                    else:
                        # Call failed, handle the error
                        error_code, error_message = result_code
                        print(f"Error submitting patient question: {error_message}")
                        # ... handle the error as needed
            #####the code above is in the wrong spot
        st.write("> **Yükədikdən sonra növbəti addıma keçin...**")

with st.expander("##### Əlavə suallarımız var..."):
    continue_after_lab_analysis()
    
with st.expander("Sualınızı qeyd edin"):
    if "followup" in st.session_state:
        claude_followup=st.session_state.followup
        # submit_user_response(claude_followup,None,"followup","submit")
        user_followup=st.text_area("Based on your lab results you may ask the following questions to your healthcare provider. Feel free to modify/replace them:", value=claude_followup)

# if __name__ == "__main__": #THE PAGE IS NOT DISPLAYED WHEN MAIN IS ACTIVATED. WHY?
#     main()

css = '''
<style>
    .stTabs [data-baseweb="tab-list"] button {
    margin-bottom:4px;
    height:50px;
    background-color: #e6f0f2; 
    color:#000;
    border-radius:10px;
    padding:15px;
    }
    /* Style for tab buttons on hover */
    .stTabs [data-baseweb="tab-list"] button:hover {
        color: #fff; /* Change font color to white on hover */
        background-color: #004c66;
    }

    /* Style for selected/active tab button */
    .stTabs [data-baseweb="tab-list"] button[aria-selected="true"] {
        color: #fff; /* Change font color to white for active tab */
        background-color: #004c66;
    }
    .stTabs [data-baseweb="tab-list"] button [data-testid="stMarkdownContainer"] p {
    font-size:15px;
    font-weight:600;
    }
    
    .gen_header{
    padding:10px;
    color:#fff;
    background-color: #aaaf2d;
    border-radius:5px;
    width:15em;
    }

</style>
'''

st.html(css)

